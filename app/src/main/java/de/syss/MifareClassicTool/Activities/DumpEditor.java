package de.syss.MifareClassicTool.Activities;

import android.app.AlertDialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.Typeface;
import android.os.Bundle;
import android.text.Editable;
import android.text.InputType;
import android.text.SpannableString;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.UnderlineSpan;
import android.util.Log;
import android.util.TypedValue;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.TextView;
import android.widget.TextView.BufferType;
import android.widget.Toast;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Locale;

import de.syss.MifareClassicTool.Common;
import de.syss.MifareClassicTool.MCReader;
import de.syss.MifareClassicTool.R;

import static de.syss.MifareClassicTool.Activities.Preferences.Preference.UseInternalStorage;

/**
 * A hex editor for showing/editing tag dumps generated by {@link ReadTag}
 * @author Jinhao Jiang
 */
public class DumpEditor extends BasicActivity implements IActivityThatReactsToSave {

    public final static String EXTRA_DUMP = "de.syss.MifareClassicTool.Activity.DUMP";
    private static final String LOG_TAG = DumpEditor.class.getSimpleName();

    private LinearLayout mLayout;
    private String mDumpName;
    private String mKeysName;
    private String mUID;
    private String[] mLines;

    private boolean mDumpChanged;
    private boolean mCloseAfterSuccessfulSave;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_dump_editor);

        mLayout = findViewById(R.id.linearLayoutDumpEditor);

        // Color caption
        SpannableString keyA = Common.colorString(
                getString(R.string.text_keya),
                getResources().getColor(R.color.light_green));
        SpannableString keyB =  Common.colorString(
                getString(R.string.text_keyb),
                getResources().getColor(R.color.dark_green));
        SpannableString ac = Common.colorString(
                getString(R.string.text_ac),
                getResources().getColor(R.color.orange));
        SpannableString vb = Common.colorString(
                getString(R.string.text_valueblock),
                getResources().getColor(R.color.yellow));

        TextView caption = findViewById(R.id.textViewDumpEditorCaption);
        caption.setText(TextUtils.concat(
                vb, " | ", keyA, " | ", keyB, " | ", ac),
                BufferType.SPANNABLE);

        TextView captionTitle = findViewById(R.id.textViewDumpEditorCaptionTitle);
        SpannableString updateText = Common.colorString(
                getString(R.string.text_update_colors),
                getResources().getColor(R.color.blue));

        updateText.setSpan(new UnderlineSpan(), 0, updateText.length(), 0);
        captionTitle.setText(TextUtils.concat(
                getString(R.string.text_caption_title),
                ": (", updateText, ")"));

        if (getIntent().hasExtra(EXTRA_DUMP)) {
            String[] dump = getIntent().getStringArrayExtra(EXTRA_DUMP);
            // Set up the title with UID
            if (Common.getUID() != null) {
                mUID = Common.byte2HexString(Common.getUID());
                setTitle(getTitle() + " (UID: " + mUID+ ")");
            }
            initEditor(dump);
            setIntent(null);
        } else if (getIntent().hasExtra(FileChooser.EXTRA_CHOSEN_FILE)) {
            File file = new File(getIntent().getStringExtra(FileChooser.EXTRA_CHOSEN_FILE));
            mDumpName = file.getName();
            setTitle(getTitle() + " (" + mDumpName + ")");
            initEditor(Common.readFileLineByLine(file, false, this));
            setIntent(null);
        } else if (savedInstanceState != null) {
            mDumpName = savedInstanceState.getString("file_name");
            if (mDumpName != null) {
                setTitle(getTitle() + " (" + mDumpName + ")");
            }
            mLines = savedInstanceState.getStringArray("lines");
            if (mLines != null) {
                initEditor(mLines);
            }
        }
    }

    /**
     * Add a menu with editor functions
     */
    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.dump_editor_functions, menu);
        menu.findItem(R.id.menuDumpEditorWriteDump).setEnabled(!Common.useAsEditorOnly());
        return true;
    }

    /**
     * Save {@link #mLines} and {@link #mDumpName}
     */
    @Override
    public void onSaveInstanceState (Bundle outState) {
        outState.putStringArray("lines", mLines);
        outState.putString("file_name", mDumpName);
    }

    /**
     * Handle the function selected from the editor menu
     */
    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.menuDumpEditorSave:
                saveDump();
                return true;
            case R.id.menuDumpEditorAscii:
                showAscii();
                return true;
            case R.id.menuDumpEditorAccessConditions:
                showAC();
                return true;
            case R.id.menuDumpEditorValueBlocksAsInt:
                decodeValueBlocks();
                return true;
            case R.id.menuDumpEditorShare:
                shareDump();
                return true;
            case R.id.menuDumpEditorOpenValueBlockTool:
                openValueBlockTool();
                return true;
            case R.id.menuDumpEditorOpenAccessConditionTool:
                openAccessConditionTool();
                return true;
            case R.id.menuDumpEditorWriteDump:
                writeDump();
                return true;
            case R.id.menuDumpEditorDiffDump:
                diffDump();
                return true;
            case R.id.menuDumpEditorSaveKeys:
                saveKeys();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }

    /**
     * Update the colors
     */
    public void onUpdateColors(View view) {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        // Backup the focused view
        View focused = mLayout.getFocusedChild();
        int focusIndex = -1;
        if (focused != null) {
            focusIndex = mLayout.indexOfChild(focused);
        }
        initEditor(mLines);

        if (focusIndex != -1) {
            // Restore the focused view
            while (focusIndex >= 0 && mLayout.getChildAt(focusIndex) == null) {
                focusIndex--;
            }
            if (focusIndex >= 0) {
                mLayout.getChildAt(focusIndex).requestFocus();
            }
        }
    }

    /**
     * Display a dialog with the options of "save", "don't save" and "cancel"
     * (if there are unsaved changes)
     */
    @Override
    public void onBackPressed() {
        if (mDumpChanged) {
            new AlertDialog.Builder(this)
            .setTitle(R.string.dialog_save_before_quitting_title)
            .setMessage(R.string.dialog_save_before_quitting)
            .setIcon(android.R.drawable.ic_dialog_info)
            .setPositiveButton(R.string.action_save,
                    (dialog, which) -> {
                        // Save
                        mCloseAfterSuccessfulSave = true;
                        saveDump();
                    })
            .setNeutralButton(R.string.action_cancel,
                    (dialog, which) -> {
                        // Cancel
                    })
            .setNegativeButton(R.string.action_dont_save,
                    (dialog, id) -> {
                        // Don't save
                        finish();
                    }).show();
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public void onSaveSuccessful() {
        if (mCloseAfterSuccessfulSave) {
            finish();
        }
        mDumpChanged = false;
    }

    @Override
    public void onSaveFailure() {
        mCloseAfterSuccessfulSave = false;
    }

    /**
     * Check and save the dump
     */
    private void saveDump() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        // Set the filename
        if (mDumpName == null) {
            GregorianCalendar calendar = new GregorianCalendar();
            SimpleDateFormat fmt = new SimpleDateFormat(
                    "yyyy-MM-dd_HH-mm-ss", Locale.getDefault());
            fmt.setCalendar(calendar);
            String dateFormatted = fmt.format(calendar.getTime());
            mDumpName = "UID_" + mUID + "_" + dateFormatted;
        }

        saveFile(mLines, mDumpName, true,
                R.string.dialog_save_dump_title, R.string.dialog_save_dump);
    }

    /**
     * Check if the external storage is writable and ask user for the filename
     */
    private void saveFile(final String[] data, final String fileName,
                          final boolean isDump, int titleId, int messageId) {
        if (!Common.getPreferences().getBoolean(UseInternalStorage.toString(), false)
                && !Common.isExternalStorageWritableErrorToast(this)) {
            return;
        }

        String targetDir = (isDump) ? Common.DUMPS_DIR : Common.KEYS_DIR;
        final File path = Common.getFileFromStorage(
                Common.HOME_DIR +  "/" + targetDir);
        final Context context = this;
        final IActivityThatReactsToSave activity = this;

        // Ask user for the filename
        final EditText input = new EditText(this);
        input.setInputType(InputType.TYPE_CLASS_TEXT);
        input.setLines(1);
        input.setHorizontallyScrolling(true);
        input.setText(fileName);
        input.setSelection(input.getText().length());
        new AlertDialog.Builder(this)
            .setTitle(titleId)
            .setMessage(messageId)
            .setIcon(android.R.drawable.ic_menu_save)
            .setView(input)
            .setPositiveButton(R.string.action_save,
                    (dialog, whichButton) -> {
                        if (input.getText() != null
                                && !input.getText().toString().equals("")) {
                            File file = new File(path.getPath(), input.getText().toString());
                            Common.checkFileExistenceAndSave(
                                    file, data, isDump, context, activity);

                            if (isDump) {
                                mDumpName = file.getName();
                            } else {
                                mKeysName = file.getName();
                            }
                        } else {
                            // Empty name
                            Toast.makeText(context, R.string.info_empty_file_name,
                                    Toast.LENGTH_LONG).show();
                        }
                    })
            .setNegativeButton(R.string.action_cancel,
                    (dialog, whichButton) -> mCloseAfterSuccessfulSave = false).show();
        onUpdateColors(null);
    }

    /**
     * Check if all sectors contain valid data
     */
    private int checkDumpAndUpdateLines() {
        ArrayList<String> checkedLines = new ArrayList<>();

        for(int i = 0; i < mLayout.getChildCount(); i++) {
            View child = mLayout.getChildAt(i);
            if (child instanceof EditText) {
                String[] lines = ((EditText)child).getText().toString()
                        .split(System.getProperty("line.separator"));
                if (lines.length != 4 && lines.length != 16) {
                    // Not 4 or 16 lines
                    return 1;
                }
                for (int j = 0; j < lines.length; j++) {
                    if (!lines[j].matches("[0-9A-Fa-f-]+")) {
                        // Not hex
                        return 2;
                    }
                    if (lines[j].length() != 32) {
                        // Not 32 chars per line
                        return 3;
                    }
                    lines[j] = lines[j].toUpperCase(Locale.getDefault());
                    checkedLines.add(lines[j]);
                }
            } else if (child instanceof TextView) {
                TextView tv = (TextView) child;
                String tag = (String) tv.getTag();

                if (tag != null && tag.equals("real_header")) {
                    // Mark headers with "+"
                    checkedLines.add("+Sector: " + tv.getText().toString().split(": ")[1]);
                }
            }
        }

        // Update mLines
        mLines = checkedLines.toArray(new String[checkedLines.size()]);
        return 0;
    }

    /**
     * Initialize the editor with the given lines
     */
    private void initEditor(String[] lines) {
        int err = Common.isValidDump(lines, true);
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            Toast.makeText(this, R.string.info_editor_init_error,
                    Toast.LENGTH_LONG).show();
            finish();
            return;
        }

        // Parse and display the dump
        boolean tmpDumpChanged = mDumpChanged;
        mLayout.removeAllViews();
        boolean isFirstBlock = false;
        EditText et = null;
        ArrayList<SpannableString> blocks = new ArrayList<>(4);

        for (int i = 0; i < lines.length; i++) {
            if (lines[i].startsWith("+")) {
                isFirstBlock = lines[i].endsWith(" 0");
                String sectorNumber = lines[i].split(": ")[1];
                // Add sector header
                TextView tv = new TextView(this);
                tv.setTextColor(getResources().getColor(R.color.blue));
                tv.setText(getString(R.string.text_sector) + ": " + sectorNumber);
                mLayout.addView(tv);

                if (i + 1 != lines.length && !lines[i + 1].startsWith("*")) {
                    // Add sector data
                    et = new EditText(this);
                    et.setLayoutParams(new LayoutParams(
                            LayoutParams.WRAP_CONTENT,
                            LayoutParams.WRAP_CONTENT));
                    et.setInputType(et.getInputType()
                            | InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS
                            | InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS);
                    et.setTypeface(Typeface.MONOSPACE);
                    et.setTextSize(TypedValue.COMPLEX_UNIT_PX,
                            new TextView(this).getTextSize());
                    // Add a listener for the changes to the text
                    et.addTextChangedListener(new TextWatcher(){
                        @Override
                        public void afterTextChanged(Editable s) {
                            // Text was changed
                            mDumpChanged = true;
                        }
                        @Override
                        public void beforeTextChanged(CharSequence s,
                                                      int start, int count, int after) {
                        }
                        @Override
                        public void onTextChanged(CharSequence s,
                                                  int start, int before, int count) {
                        }
                    });

                    mLayout.addView(et);
                    tv.setTag("real_header");
                }
            } else if (lines[i].startsWith("*")){
                // Non-readable sector
                TextView tv = new TextView(this);
                tv.setTextColor(getResources().getColor(R.color.red));
                tv.setText("   " +  getString(R.string.text_no_key_io_error));
                tv.setTag("error");
                mLayout.addView(tv);
            } else {
                if (i + 1 == lines.length || lines[i + 1].startsWith("+")) {
                    // Sector trailer
                    blocks.add(colorSectorTrailer(lines[i]));
                    // Add sector data to the EditText
                    CharSequence text = "";
                    int j;
                    for (j = 0; j < blocks.size()-1; j++) {
                        text = TextUtils.concat(text, blocks.get(j), "\n");
                    }
                    text = TextUtils.concat(text, blocks.get(j));
                    et.setText(text, BufferType.SPANNABLE);
                    blocks = new ArrayList<>(4);
                } else {
                    // Add data block
                    blocks.add(colorDataBlock(lines[i], isFirstBlock));
                    isFirstBlock = false;
                }
            }
        }

        mDumpChanged = tmpDumpChanged;
    }

    /**
     * Display the the hex data as US-ASCII with {@link HexToAscii}
     */
    private void showAscii() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        ArrayList<String> tmpDump = new ArrayList<>();
        for (int i = 0; i < mLines.length - 1; i++) {
            if (i + 1 != mLines.length && !mLines[i + 1].startsWith("+")) {
                tmpDump.add(mLines[i]);
            }
        }
        String[] dump = tmpDump.toArray(new String[tmpDump.size()]);

        Intent intent = new Intent(this, HexToAscii.class);
        intent.putExtra(EXTRA_DUMP, dump);
        startActivity(intent);
    }

    /**
     * Display the result of {@link AccessConditionDecoder}
     */
    private void showAC() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        ArrayList<String> tmpACs = new ArrayList<>();
        int lastSectorHeader = 0;
        for (int i = 0; i < mLines.length; i++) {
            if (mLines[i].startsWith("+")) {
                // Header
                tmpACs.add(mLines[i]);
                lastSectorHeader = i;
            } else if (i + 1 == mLines.length || mLines[i + 1].startsWith("+")) {
                // Access Condition
                if (i - lastSectorHeader > 4) {
                    tmpACs.add("*" + mLines[i].substring(12, 20));
                } else {
                    tmpACs.add(mLines[i].substring(12, 20));
                }
            }
        }
        String[] ac = tmpACs.toArray(new String[tmpACs.size()]);

        Intent intent = new Intent(this, AccessConditionDecoder.class);
        intent.putExtra(AccessConditionDecoder.EXTRA_AC, ac);
        startActivity(intent);
    }

    /**
     * Display the value blocks as integer with {@link ValueBlocksToInt}
     */
    private void decodeValueBlocks() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        ArrayList<String> tmpVBs = new ArrayList<>();
        String header = "";
        int blockCounter = 0;
        for (String line : mLines) {
            if (line.startsWith("+")) {
                header = line;
                blockCounter = 0;
            } else {
                if (Common.isValueBlock(line)) {
                    // Header
                    tmpVBs.add(header + ", Block: " + blockCounter);
                    // Value Block
                    tmpVBs.add(line);
                }
                blockCounter++;
            }
        }

        if (tmpVBs.size() > 0) {
            String[] vb = tmpVBs.toArray(new String[tmpVBs.size()]);
            Intent intent = new Intent(this, ValueBlocksToInt.class);
            intent.putExtra(ValueBlocksToInt.EXTRA_VB, vb);
            startActivity(intent);
        } else {
            // Value block not found
            Toast.makeText(this, R.string.info_no_vb_in_dump, Toast.LENGTH_LONG).show();
        }
    }

    /**
     * Open the Value Block decoder/encoder ({@link ValueBlockTool}).
     * @see ValueBlockTool
     */
    private void openValueBlockTool() {
        Intent intent = new Intent(this, ValueBlockTool.class);
        startActivity(intent);
    }

    /**
     * Open the Access Condition decoder/encoder ({@link AccessConditionTool}).
     * @see AccessConditionTool
     */
    private void openAccessConditionTool() {
        Intent intent = new Intent(this, AccessConditionTool.class);
        startActivity(intent);
    }

    /**
     * Write the currently displayed dump.
     * @see WriteTag
     */
    private void writeDump() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }
        Intent intent = new Intent(this, WriteTag.class);
        intent.putExtra(WriteTag.EXTRA_DUMP, mLines);
        startActivity(intent);
    }

    /**
     * Compare the current dump with another dump using {@link DiffTool}
     */
    private void diffDump() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        Intent intent = new Intent(this, DiffTool.class);
        intent.putExtra(DiffTool.EXTRA_DUMP, mLines);
        startActivity(intent);
    }


    /**
     * Share a dump as "file://" stream resource
     */
    private void shareDump() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        // Save dump to to a temporary file
        String fileName;
        if (mDumpName == null) {
            // Use date and time as the filename (if not given by user)
            GregorianCalendar calendar = new GregorianCalendar();
            SimpleDateFormat fmt = new SimpleDateFormat("yyyy-MM-dd_HH-mm-ss",
                    Locale.getDefault());
            fmt.setCalendar(calendar);
            fileName = fmt.format(calendar.getTime());
        } else {
            fileName = mDumpName;
        }

        // Save file to tmp directory
        File file = Common.getFileFromStorage(
                Common.HOME_DIR + "/" + Common.TMP_DIR + "/" + fileName);
        if (!Common.saveFile(file, mLines, false)) {
            Toast.makeText(this, R.string.info_save_error, Toast.LENGTH_LONG).show();
            return;
        }

        // Share file
        Common.shareTmpFile(this, file);
    }

    /**
     * Extract and save all keys from the current dump
     */
    private void saveKeys() {
        int err = checkDumpAndUpdateLines();
        if (err != 0) {
            Common.isValidDumpErrorToast(err, this);
            return;
        }

        // Get all keys
        HashSet<String> tmpKeys = new HashSet<>();
        for (int i = 0; i < mLines.length; i++) {
           if (i + 1 == mLines.length || mLines[i + 1].startsWith("+")) {
                // Sector trailer
               String keyA = mLines[i].substring(0,12).toUpperCase();
               String keyB = mLines[i].substring(20).toUpperCase();
               if (!keyA.equals(MCReader.NO_KEY)) {
                   tmpKeys.add(keyA);
               }
               if (!keyB.equals(MCReader.NO_KEY)) {
                   tmpKeys.add(keyB);
               }
            }
        }
        String[] keys = tmpKeys.toArray(new String[tmpKeys.size()]);

        // Set the filename to the UID (if not given)
        if (mKeysName == null) {
            if (mDumpName == null) {
                mKeysName = "UID_" + mUID;
            } else {
                mKeysName = mDumpName;
            }
        }

        saveFile(keys, mKeysName, false, R.string.dialog_save_keys_title,
                R.string.dialog_save_keys);
    }

    /**
     * Create a full colored string for each block
     */
    private SpannableString colorDataBlock(String data, boolean hasUID) {
        SpannableString ret;

        if (hasUID) {
            // First block
            ret = new SpannableString(TextUtils.concat(
                    Common.colorString(data, getResources().getColor(R.color.purple))));
        } else {
            if (Common.isValueBlock(data)) {
                // Value block
                ret = Common.colorString(data, getResources().getColor(R.color.yellow));
            } else {
                // Data only
                ret = new SpannableString(data);
            }
        }

        return ret;
    }

    /**
     * Create a full colored sector trailer for the last block of each sector
     */
    private SpannableString colorSectorTrailer(String data) {
        // Get sector trailer colors
        int colorKeyA = getResources().getColor(R.color.light_green);
        int colorKeyB = getResources().getColor(R.color.dark_green);
        int colorAC = getResources().getColor(R.color.orange);

        try {
            SpannableString keyA = Common.colorString(data.substring(0, 12), colorKeyA);
            SpannableString keyB = Common.colorString(data.substring(20), colorKeyB);
            SpannableString ac = Common.colorString(data.substring(12, 20), colorAC);
            return new SpannableString(TextUtils.concat(keyA, ac, keyB));
        } catch (IndexOutOfBoundsException e) {
            Log.d(LOG_TAG, "Error while coloring " + "sector trailer");
        }

        return new SpannableString(data);
    }
}
